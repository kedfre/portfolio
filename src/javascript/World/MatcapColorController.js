/**
 * MATCAPCOLORCONTROLLER.JS - Contr√¥leur de Couleurs des Matcaps
 *
 * Ce composant permet de modifier dynamiquement les couleurs des matcaps
 * appliqu√©s aux v√©hicules dans la galerie.
 *
 * FONCTIONNALIT√âS :
 * - Modification des couleurs des matcaps en temps r√©el
 * - Interface de debug pour s√©lectionner les couleurs
 * - Support de tous les types de matcaps (chrome, m√©tal, verre, etc.)
 * - Sauvegarde des pr√©f√©rences de couleur
 * - Application des couleurs aux v√©hicules existants
 *
 * UTILISATION :
 * - Int√©gration avec VehiclePreview
 * - Contr√¥les de debug pour l'interface
 * - Modification des couleurs par nom de mat√©riau
 */

import * as THREE from 'three'

export default class MatcapColorController
{
    /**
     * Constructor - Initialisation du contr√¥leur de couleurs
     *
     * @param {Object} _options - Options de configuration
     * @param {Object} _options.debug - Interface de debug
     * @param {Object} _options.resources - Gestionnaire de ressources
     */
    constructor(_options)
    {
        this.debug = _options.debug
        this.resources = _options.resources
        
        // Configuration des couleurs par d√©faut pour chaque type de matcap
        this.colorPresets = {
            chrome: { hue: 0, saturation: 0, lightness: 0.8 },
            blackMetal: { hue: 0, saturation: 0, lightness: 0.2 },
            orangeDuckHazzard: { hue: 30, saturation: 0.8, lightness: 0.6 },
            glass: { hue: 180, saturation: 0.3, lightness: 0.9 },
            black: { hue: 0, saturation: 0, lightness: 0.1 },
            white: { hue: 0, saturation: 0, lightness: 0.95 },
            yellow: { hue: 60, saturation: 0.8, lightness: 0.7 },
            red: { hue: 0, saturation: 0.8, lightness: 0.6 },
            metal: { hue: 0, saturation: 0, lightness: 0.5 },
            gray: { hue: 0, saturation: 0, lightness: 0.6 }
        }
        
        // √âtat actuel des couleurs
        this.currentColors = { ...this.colorPresets }
        
        // R√©f√©rence au v√©hicule actuel pour les mises √† jour
        this.currentVehicle = null
        
        // Initialisation de l'interface de debug
        this.setDebug()
    }
    
    /**
     * SetDebug - Configuration de l'interface de debug
     *
     * Ajoute les contr√¥les de couleur pour chaque type de matcap.
     */
    setDebug()
    {
        if(!this.debug)
        {
            return
        }
        
        // Dossier principal pour les couleurs de matcaps
        this.debugFolder = this.debug.addFolder('matcapColors')
        
        // Cr√©ation des contr√¥les pour chaque type de matcap
        Object.keys(this.colorPresets).forEach(matcapType => {
            const matcapFolder = this.debugFolder.addFolder(matcapType)
            
            // Contr√¥le de la teinte (Hue)
            matcapFolder.add(this.currentColors[matcapType], 'hue')
                .min(0).max(360).step(1)
                .name('Hue')
                .onChange(() => this.updateMatcapColor(matcapType))
            
            // Contr√¥le de la saturation
            matcapFolder.add(this.currentColors[matcapType], 'saturation')
                .min(0).max(1).step(0.01)
                .name('Saturation')
                .onChange(() => this.updateMatcapColor(matcapType))
            
            // Contr√¥le de la luminosit√©
            matcapFolder.add(this.currentColors[matcapType], 'lightness')
                .min(0).max(1).step(0.01)
                .name('Lightness')
                .onChange(() => this.updateMatcapColor(matcapType))
            
            // Bouton de r√©initialisation
            matcapFolder.add(this, 'resetMatcapColor', matcapType).name('Reset')
        })
        
        // Actions globales
        this.debugFolder.add(this, 'resetAllColors').name('Reset All')
        this.debugFolder.add(this, 'applyColorsToVehicle').name('Apply to Vehicle')
    }
    
    /**
     * UpdateMatcapColor - Mise √† jour de la couleur d'un matcap
     *
     * @param {string} _matcapType - Type de matcap √† modifier
     */
    updateMatcapColor(_matcapType)
    {
        console.log(`üé® Mise √† jour de la couleur pour ${_matcapType}:`, this.currentColors[_matcapType])
        
        // Si un v√©hicule est actuellement affich√©, appliquer les changements
        if(this.currentVehicle)
        {
            this.applyColorsToVehicle(this.currentVehicle)
        }
    }
    
    /**
     * ApplyColorsToVehicle - Application des couleurs au v√©hicule actuel
     *
     * @param {Object} _vehicle - V√©hicule √† modifier
     */
    applyColorsToVehicle(_vehicle)
    {
        if(!_vehicle || !_vehicle.container)
        {
            console.warn('‚ùå Aucun v√©hicule valide pour appliquer les couleurs')
            return
        }
        
        console.log('üé® Application des couleurs au v√©hicule')
        
        // Parcourir tous les meshes du v√©hicule
        _vehicle.container.traverse((child) => {
            if(child instanceof THREE.Mesh && child.material)
            {
                // D√©terminer le type de matcap selon le nom
                const meshName = child.name.toLowerCase()
                let matcapType = this.getMatcapTypeFromName(meshName)
                
                if(matcapType && this.currentColors[matcapType])
                {
                    // Cr√©er un nouveau mat√©riau avec la couleur modifi√©e
                    const newMaterial = this.createColoredMatcapMaterial(matcapType)
                    child.material = newMaterial
                    child.material.needsUpdate = true
                    
                    console.log(`üé® Couleur appliqu√©e √† ${child.name} (${matcapType})`)
                }
            }
        })
    }
    
    /**
     * GetMatcapTypeFromName - D√©termination du type de matcap selon le nom
     *
     * @param {string} _meshName - Nom du mesh
     * @returns {string|null} Type de matcap ou null
     */
    getMatcapTypeFromName(_meshName)
    {
        const name = _meshName.toLowerCase()
        
        if(name.includes('chrome')) return 'chrome'
        if(name.includes('blackmetal')) return 'blackMetal'
        if(name.includes('orangeduckhazzard')) return 'orangeDuckHazzard'
        if(name.includes('glass')) return 'glass'
        if(name.includes('black')) return 'black'
        if(name.includes('white')) return 'white'
        if(name.includes('yellow')) return 'yellow'
        if(name.includes('red')) return 'red'
        
        return null
    }
    
    /**
     * CreateColoredMatcapMaterial - Cr√©ation d'un mat√©riau matcap color√©
     *
     * @param {string} _matcapType - Type de matcap
     * @returns {THREE.MeshMatcapMaterial} Mat√©riau avec couleur modifi√©e
     */
    createColoredMatcapMaterial(_matcapType)
    {
        const colorConfig = this.currentColors[_matcapType]
        
        // Conversion HSL vers RGB
        const color = new THREE.Color()
        color.setHSL(colorConfig.hue / 360, colorConfig.saturation, colorConfig.lightness)
        
        // Cr√©ation du mat√©riau avec la couleur
        const material = new THREE.MeshMatcapMaterial({
            color: color,
            matcap: this.getOriginalMatcapTexture(_matcapType)
        })
        
        return material
    }
    
    /**
     * GetOriginalMatcapTexture - R√©cup√©ration de la texture matcap originale
     *
     * @param {string} _matcapType - Type de matcap
     * @returns {THREE.Texture} Texture matcap originale
     */
    getOriginalMatcapTexture(_matcapType)
    {
        const textureMap = {
            chrome: this.resources.items.matcapChromeTexture,
            blackMetal: this.resources.items.matcapBlackMetalTexture,
            orangeDuckHazzard: this.resources.items.matcapOrangeDuckHazzardTexture,
            glass: this.resources.items.matcapGlassTexture,
            black: this.resources.items.matcapBlackTexture,
            white: this.resources.items.matcapWhiteTexture,
            yellow: this.resources.items.matcapYellowTexture,
            red: this.resources.items.matcapRedTexture,
            metal: this.resources.items.matcapMetalTexture,
            gray: this.resources.items.matcapGrayTexture
        }
        
        return textureMap[_matcapType] || this.resources.items.matcapGrayTexture
    }
    
    /**
     * ResetMatcapColor - R√©initialisation d'une couleur de matcap
     *
     * @param {string} _matcapType - Type de matcap √† r√©initialiser
     */
    resetMatcapColor(_matcapType)
    {
        this.currentColors[_matcapType] = { ...this.colorPresets[_matcapType] }
        console.log(`üîÑ Couleur r√©initialis√©e pour ${_matcapType}`)
        
        if(this.currentVehicle)
        {
            this.applyColorsToVehicle(this.currentVehicle)
        }
    }
    
    /**
     * ResetAllColors - R√©initialisation de toutes les couleurs
     */
    resetAllColors()
    {
        this.currentColors = { ...this.colorPresets }
        console.log('üîÑ Toutes les couleurs ont √©t√© r√©initialis√©es')
        
        if(this.currentVehicle)
        {
            this.applyColorsToVehicle(this.currentVehicle)
        }
    }
    
    /**
     * SetCurrentVehicle - D√©finition du v√©hicule actuel
     *
     * @param {Object} _vehicle - V√©hicule actuel
     */
    setCurrentVehicle(_vehicle)
    {
        this.currentVehicle = _vehicle
        console.log('üöó V√©hicule actuel d√©fini pour le contr√¥leur de couleurs')
    }
    
    /**
     * GetColorConfig - R√©cup√©ration de la configuration de couleur
     *
     * @param {string} _matcapType - Type de matcap
     * @returns {Object} Configuration de couleur
     */
    getColorConfig(_matcapType)
    {
        return this.currentColors[_matcapType] || this.colorPresets[_matcapType]
    }
    
    /**
     * SetColorConfig - D√©finition d'une configuration de couleur
     *
     * @param {string} _matcapType - Type de matcap
     * @param {Object} _config - Configuration de couleur
     */
    setColorConfig(_matcapType, _config)
    {
        this.currentColors[_matcapType] = { ..._config }
        console.log(`üé® Configuration de couleur mise √† jour pour ${_matcapType}:`, _config)
        
        if(this.currentVehicle)
        {
            this.applyColorsToVehicle(this.currentVehicle)
        }
    }
}