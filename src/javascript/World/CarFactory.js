/**
 * CARFACTORY.JS - Factory pour la S√©lection des Voitures
 *
 * Ce fichier g√®re la cr√©ation et la s√©lection des diff√©rentes voitures disponibles
 * dans le portfolio. Il utilise le pattern Factory pour instancier la bonne classe
 * de voiture selon la configuration.
 *
 * RESPONSABILIT√âS :
 * - D√©tection du type de voiture demand√©
 * - Instanciation de la bonne classe de voiture
 * - Gestion de la configuration des voitures
 * - Interface unifi√©e pour toutes les voitures
 *
 * VOITURES SUPPORT√âES :
 * - Car : Voiture par d√©faut et CyberTruck
 * - DukeHazzardCar : Voiture Duke Hazzard avec caract√©ristiques uniques
 *
 * UTILISATION :
 * - Factory pattern pour la s√©lection des voitures
 * - Configuration via URL hash ou param√®tres
 * - Interface unifi√©e pour toutes les voitures
 */

import Car from './Car.js'
import DukeHazzardCar from './DukeHazzardCar.js'

export default class CarFactory
{
    /**
     * Constructor - Initialisation de la factory de voitures
     *
     * Initialise la factory qui g√®re la cr√©ation et la s√©lection des diff√©rentes
     * voitures disponibles dans le portfolio.
     *
     * @param {Object} _options - Options de configuration
     * @param {Object} _options.time - Instance de gestion du temps (Time.js)
     * @param {Object} _options.resources - Gestionnaire de ressources (Resources.js)
     * @param {Object} _options.objects - Gestionnaire d'objets 3D (Objects.js)
     * @param {Object} _options.physics - Syst√®me de physique (Physics.js avec Cannon.js)
     * @param {Object} _options.shadows - Gestionnaire d'ombres (Shadows.js)
     * @param {Object} _options.materials - Gestionnaire de mat√©riaux (Materials.js)
     * @param {Object} _options.controls - Syst√®me de contr√¥les (Controls.js)
     * @param {Object} _options.sounds - Gestionnaire de sons (Sounds.js)
     * @param {Object} _options.renderer - Rendu Three.js (Renderer.js)
     * @param {Object} _options.camera - Instance de cam√©ra (Camera.js)
     * @param {Object} _options.debug - Interface de debug (dat.GUI)
     * @param {Object} _options.config - Configuration de l'application
     */
    constructor(_options)
    {
        // Stockage des options de configuration
        this.options = _options
        this.car = null
        this.carType = null

        // Cr√©ation de la voiture selon la configuration
        this.createCar()
    }

    /**
     * CreateCar - Cr√©ation de la voiture selon la configuration
     *
     * D√©termine le type de voiture √† cr√©er selon la configuration et instancie
     * la bonne classe de voiture.
     *
     * TYPES DE VOITURES SUPPORT√âES :
     * - 'dukehazzard' : Voiture Duke Hazzard avec caract√©ristiques uniques
     * - 'cybertruck' : CyberTruck (mode futuriste)
     * - 'default' : Voiture par d√©faut
     */
    createCar()
    {
        // D√©tection du type de voiture demand√©
        if(this.options.config.dukeHazzard)
        {
            // Voiture Duke Hazzard
            this.carType = 'dukehazzard'
            console.log('üè≠ CarFactory - Cr√©ation de Duke Hazzard Car')
            this.car = new DukeHazzardCar(this.options)
        }
        else if(this.options.config.cyberTruck)
        {
            // CyberTruck (mode futuriste)
            this.carType = 'cybertruck'
            this.car = new Car(this.options)
        }
        else
        {
            // Voiture par d√©faut
            this.carType = 'default'
            this.car = new Car(this.options)
        }

        // Log de la voiture cr√©√©e
        console.log(`üöó Voiture cr√©√©e : ${this.carType}`)
    }

    /**
     * GetCar - R√©cup√©ration de l'instance de voiture
     *
     * Retourne l'instance de la voiture cr√©√©e.
     *
     * @returns {Object} Instance de la voiture (Car ou DukeHazzardCar)
     */
    getCar()
    {
        return this.car
    }

    /**
     * GetCarType - R√©cup√©ration du type de voiture
     *
     * Retourne le type de voiture actuellement utilis√©.
     *
     * @returns {string} Type de voiture ('dukehazzard', 'cybertruck', 'default')
     */
    getCarType()
    {
        return this.carType
    }

    /**
     * Update - Mise √† jour de la voiture
     *
     * Met √† jour la voiture actuelle. D√©l√®gue l'appel √† la m√©thode update
     * de la voiture instanci√©e.
     */
    update()
    {
        if(this.car)
        {
            this.car.update()
        }
    }

    /**
     * Destroy - Destruction de la voiture
     *
     * Nettoie la voiture actuelle. D√©l√®gue l'appel √† la m√©thode destroy
     * de la voiture instanci√©e.
     */
    destroy()
    {
        if(this.car)
        {
            this.car.destroy()
        }
    }

    /**
     * GetContainer - R√©cup√©ration du conteneur de la voiture
     *
     * Retourne le conteneur Three.js de la voiture pour l'int√©gration
     * dans la sc√®ne 3D.
     *
     * @returns {THREE.Object3D} Conteneur de la voiture
     */
    getContainer()
    {
        if(this.car)
        {
            return this.car.container
        }
        return null
    }

    /**
     * GetPosition - R√©cup√©ration de la position de la voiture
     *
     * Retourne la position actuelle de la voiture.
     *
     * @returns {THREE.Vector3} Position de la voiture
     */
    getPosition()
    {
        if(this.car)
        {
            return this.car.position
        }
        return null
    }
}
